<!-- https://leetcode.com/problems/maximum-odd-binary-number/description/?envType=problem-list-v2&envId=math&status=SOLVED&difficulty=EASY -->

class Solution {
    public String maximumOddBinaryNumber(String s){
        int[]arr = new int[s.length()];
        ArrayList<Integer> index = new ArrayList();
        int temp;
        int count=0;
        if(s.length() == 1){
            return s;
        }
        for(int i=0; i< s.length();i++){
            arr[i] = s.charAt(i) - '0';
            if(arr[i] == 1){
                count++;
                index.add(i);
            }
        }
        if(count == 1){
            if(arr[arr.length - 1]== 0){
                temp = arr[arr.length - 1];
                arr[arr.length - 1] = arr[index.get(0)];
                arr[index.get(0)] = temp;
            }
            if(arr.length >= 2 && count == 1){
                if(arr[arr.length - 1] == 0){
                    temp = arr[arr.length - 1];
                    arr[arr.length - 1] = arr[index.get(0)];
                    arr[index.get(0)] = temp;
                }else{
                    index.remove(0);
                }
            }
        }
        if(count > 1){
            if(arr[arr.length - 1] == 0){
                temp = arr[arr.length - 1];
                arr[arr.length - 1] = arr[index.get(index.size() - 1)];
                arr[index.get(index.size() - 1)] = temp;
            }else{
                index.remove(index.size() - 1);
            }
          }
       
        for(int j=0;j<index.size();j++){
            if(arr[j]==0){
                temp = arr[j];
                arr[j] = arr[index.get(j)];
                arr[index.get(j)] = temp;
            }
            // else{
            //     index.remove(j);
            // }
        }
        
        StringBuilder binaryStringBuilder = new StringBuilder();
         for (int num : arr) {
               binaryStringBuilder.append(num);
         }
        String result = binaryStringBuilder.toString();
        return result;

    }
}