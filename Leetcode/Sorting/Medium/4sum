// https://leetcode.com/problems/4sum/?envType=problem-list-v2&envId=sorting&status=SOLVED&difficulty=MEDIUM

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ar = new ArrayList<>();
        if (nums.length < 4) {
            return ar;
        }
        Arrays.sort(nums);
        for (int a = 0; a < nums.length - 3; a++) {
            if (a > 0 && nums[a] == nums[a - 1]) {
                continue;
            }
            for (int b = a + 1; b < nums.length - 2; b++) {
                if (b > a + 1 && nums[b] == nums[b - 1]) {
                    continue;
                }
                int c = b + 1;
                int d = nums.length - 1;
                while (c < d) {
                    long sum = (long)nums[a] + (long)nums[b] + (long)nums[c] + (long)nums[d];
                    if (sum == target) {
                        List<Integer> a1 = new ArrayList<>();
                        a1.add(nums[a]);
                        a1.add(nums[b]);
                        a1.add(nums[c]);
                        a1.add(nums[d]);
                        ar.add(a1);

                        while (c < d && nums[c] == nums[c + 1]) {
                            c++;
                        }
                        while (c < d && nums[d] == nums[d - 1]) {
                            d--;
                        }
                        c++;
                        d--;
                    } else if (sum < target) {
                        c++;
                    } else {
                        d--;
                    }
                }
            }
        }
        return ar;
    }
}