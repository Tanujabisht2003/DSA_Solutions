<!-- https://leetcode.com/problems/merge-intervals/description/?envType=problem-list-v2&envId=sorting&status=SOLVED&difficulty=MEDIUM -->


class Solution {
    public int[][] merge(int[][] intervals) {
        List<List<Integer>> ar = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        if(intervals.length == 0){
            return intervals;
        }
        if(intervals.length == 1){
            return intervals;
        }
        int i = 0;
        while(i < intervals.length){
            List<Integer> ar1 = new ArrayList<>();
            int start = intervals[i][0];
            int end = intervals[i][1];

            while (i< intervals.length-1 && end >= intervals[i + 1][0]) {
                end = Math.max(intervals[i + 1][1],end);
                i++;
            }

            ar1.add(start);
            ar1.add(end);
            ar.add(ar1);
            i++;
        }

        int[][] arr = ar.stream().map(list -> list.stream().mapToInt(Integer::intValue).toArray())
                .toArray(int[][]::new);
        return arr;
    }
}